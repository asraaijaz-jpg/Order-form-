{"version":3,"sources":["components/SelectCustomer.js","components/Menu.js","data/mock_data.js","components/PlaceOrder.js","App.js","serviceWorker.js","index.js"],"names":["CustomerType","New","Existing","SelectCustomerType","_useState","useState","_useState2","_slicedToArray","customerType","setCustomerType","React","createElement","Fragment","className","type","name","value","onChange","checked","htmlFor","Object","freeze","Menu","_ref","categories","allItems","category","setCategory","_useState3","_useState4","selectedItem","setSelectedItem","_useState5","_useState6","items","setItems","_useState7","_useState8","ordered","setOrdered","id","data-toggle","map","i","key","onClick","filter","handleCategoryChange","item","console","log","concat","_toConsumableArray","JSON","stringify","price","PlaceOrder","props","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.773313e1.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./styles.css\";\r\n\r\nconst CustomerType = {\r\n  New: \"New Customer\",\r\n  Existing: \"Existing Customer\",\r\n};\r\n\r\nObject.freeze(SelectCustomerType);\r\n\r\nfunction SelectCustomerType() {\r\n  const [customerType, setCustomerType] = useState(SelectCustomerType.New);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"customer-type\">\r\n        <div className=\"form-check-inline\">\r\n          <input\r\n            className=\"form-check-input\"\r\n            type=\"radio\"\r\n            name=\"customerType\"\r\n            value={CustomerType.New}\r\n            onChange={(type) => {\r\n              setCustomerType(CustomerType.New);\r\n            }}\r\n            checked={customerType == CustomerType.New}\r\n          />{\" \"}\r\n          <label className=\"form-check-label\" htmlFor=\"customerType\">\r\n            {CustomerType.New}\r\n          </label>\r\n        </div>\r\n        <div className=\"form-check-inline\">\r\n          <input\r\n            className=\"form-check-input\"\r\n            type=\"radio\"\r\n            name=\"customerType\"\r\n            value={CustomerType.Existing}\r\n            onChange={() => setCustomerType(CustomerType.Existing)}\r\n            checked={customerType == CustomerType.Existing}\r\n          />{\" \"}\r\n          <label className=\"form-check-label\" htmlFor=\"customerType\">\r\n            {CustomerType.Existing}\r\n          </label>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SelectCustomerType;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nfunction Menu({ categories, allItems }) {\r\n  const [category, setCategory] = useState(categories[0]);\r\n  const [selectedItem, setSelectedItem] = useState({});\r\n  const [items, setItems] = useState(allItems);\r\n  const [ordered, setOrdered] = useState([]);\r\n\r\n  function handleCategoryChange(category) {\r\n    setItems(allItems.filter((i) => i.type == category));\r\n    setCategory(category);\r\n    setSelectedItem(null);\r\n  }\r\n\r\n  function addToOrder(item) {\r\n    if (item != null) {\r\n      console.log(`adding ${item.name} to order...`);\r\n      setOrdered([...ordered, item]);\r\n      setSelectedItem(null);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"menu\">\r\n      <div className=\"dropdown category\">\r\n        <button\r\n          className=\"btn btn-secondary dropdown-toggle\"\r\n          type=\"button\"\r\n          id=\"categoryDropdown\"\r\n          data-toggle=\"dropdown\"\r\n        >\r\n          Select Category\r\n        </button>\r\n        <ul className=\"dropdown-menu\">\r\n          {categories.map((category, i) => (\r\n            <li key={i}>\r\n              <a\r\n                className=\"dropdown-item\"\r\n                onClick={() => handleCategoryChange(category)}\r\n              >\r\n                {category}\r\n              </a>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n      {/* Items Selection */}\r\n      <div className=\"dropdown items\">\r\n        <button\r\n          className=\"btn btn-secondary dropdown-toggle\"\r\n          type=\"button\"\r\n          id=\"categoryDropdown\"\r\n          data-toggle=\"dropdown\"\r\n        >\r\n          Select Item\r\n        </button>\r\n        <ul className=\"dropdown-menu\">\r\n          {items.map((item, i) => (\r\n            <li key={i}>\r\n              <a\r\n                className=\"dropdown-item\"\r\n                onClick={() => setSelectedItem(item)}\r\n              >\r\n                {item.name}\r\n              </a>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n\r\n      <button\r\n        className=\"btn btn-primary\"\r\n        onClick={() => addToOrder(selectedItem)}\r\n      >\r\n        Add\r\n      </button>\r\n\r\n      <p>Selected Category: {category}</p>\r\n      <p>Selected Item: {JSON.stringify(selectedItem)}</p>\r\n      <p>Ordered Items: {JSON.stringify(ordered)}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Menu;\r\n","const customers = [\r\n  {\r\n    name: \"Muhammad Mohsin Shaikh\",\r\n    sex: \"male\",\r\n  },\r\n  {\r\n    name: \"Ali\",\r\n    sex: \"male\",\r\n  },\r\n  {\r\n    name: \"Alexendra\",\r\n    sex: \"female\",\r\n  },\r\n];\r\n\r\nconst categories = [\"Drink\", \"Fast-Food\", \"BBQ\"];\r\n\r\nconst items = [\r\n  {\r\n    name: \"Apple Juice\",\r\n    type: \"Drink\",\r\n    price: 200,\r\n  },\r\n  {\r\n    name: \"Pineapple Juice\",\r\n    type: \"Drink\",\r\n    price: 300,\r\n  },\r\n  {\r\n    name: \"Zinger Burger\",\r\n    type: \"Fast-Food\",\r\n    price: 500,\r\n  },\r\n  {\r\n    name: \"Beef Burger\",\r\n    type: \"Fast-Food\",\r\n    price: 700,\r\n  },\r\n  {\r\n    name: \"Lamb Burger\",\r\n    type: \"Fast-Food\",\r\n    price: 800,\r\n  },\r\n  {\r\n    name: \"Chicken Tikka\",\r\n    type: \"BBQ\",\r\n    price: 250,\r\n  },\r\n];\r\n\r\nexport { customers, categories, items };\r\n","import React from \"react\";\r\n\r\nimport SelectCustomerType from \"./SelectCustomer\";\r\nimport Menu from \"./Menu\";\r\nimport { categories, items } from \"../data/mock_data\";\r\n\r\nfunction PlaceOrder(props) {\r\n  return (\r\n    <>\r\n      <div className=\"place-order\">\r\n        <h1 className=\"text-center\">Place an Order</h1>\r\n      </div>\r\n      <SelectCustomerType />\r\n      <Menu categories={categories} allItems={items} />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default PlaceOrder;\r\n","import React, { useState } from \"react\";\r\nimport \"../node_modules/bootstrap/dist/js/bootstrap.bundle\";\r\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\r\nimport PlaceOrder from \"./components/PlaceOrder\";\r\n\r\nfunction App() {\r\n  return <PlaceOrder />;\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}